2023-05-01 15:38:43 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.5.Final
2023-05-01 15:38:43 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2023-05-01 15:38:43 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2023-05-01 15:38:46 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service,config-client, profiles=[reactive_elastic_query], label=null, version=03b7f61604a5a71d93dc1d387d3678afc3729bff, state=null
2023-05-01 15:38:46 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service,config-client, profiles=[reactive_elastic_query], label=null, version=03b7f61604a5a71d93dc1d387d3678afc3729bff, state=null
2023-05-01 15:38:46 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/software-dev2010/spring-cloud-config-server-repository/config-client-reactive_elastic_query.yml'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/software-dev2010/spring-cloud-config-server-repository/config-client.yml'}]
2023-05-01 15:38:46 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/software-dev2010/spring-cloud-config-server-repository/config-client-reactive_elastic_query.yml'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/software-dev2010/spring-cloud-config-server-repository/config-client.yml'}]
2023-05-01 15:38:46 [main] INFO  c.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic_query
2023-05-01 15:38:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2023-05-01 15:38:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2023-05-01 15:38:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 36ms. Found 0 Elasticsearch repository interfaces.
2023-05-01 15:38:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 36ms. Found 0 Elasticsearch repository interfaces.
2023-05-01 15:38:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2023-05-01 15:38:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2023-05-01 15:38:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 1 Reactive Elasticsearch repository interfaces.
2023-05-01 15:38:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 1 Reactive Elasticsearch repository interfaces.
2023-05-01 15:38:46 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=d39f8dcc-aa69-3315-8955-73ec0ec47085
2023-05-01 15:38:46 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=d39f8dcc-aa69-3315-8955-73ec0ec47085
2023-05-01 15:38:47 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2023-05-01 15:38:47 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2023-05-01 15:38:47 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2023-05-01 15:38:47 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2023-05-01 15:38:47 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2023-05-01 15:38:47 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2023-05-01 15:38:47 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2023-05-01 15:38:47 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2023-05-01 15:38:47 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.0.4.RELEASE
2023-05-01 15:38:47 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.0.4.RELEASE
2023-05-01 15:38:47 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.6.2
2023-05-01 15:38:47 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.6.2
2023-05-01 15:38:47 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.13.2
2023-05-01 15:38:47 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.13.2
2023-05-01 15:38:47 [reactor-http-nio-1] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.6.2 - 7.13.2
2023-05-01 15:38:47 [reactor-http-nio-1] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.6.2 - 7.13.2
2023-05-01 15:38:48 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 95a908af-0a58-410d-aa05-328735baab4e

2023-05-01 15:38:48 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 95a908af-0a58-410d-aa05-328735baab4e

2023-05-01 15:38:49 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port(s): 8183
2023-05-01 15:38:49 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port(s): 8183
2023-05-01 15:38:50 [main] INFO  c.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - Started ReactiveElasticQueryServiceApplication in 8.052 seconds (JVM running for 8.593)
2023-05-01 15:41:33 [reactor-http-nio-4] INFO  c.m.d.r.e.q.s.b.i.TwitterElasticQueryService - Querying reactive elasticsearch for text kafka
2023-05-01 15:41:33 [reactor-http-nio-4] INFO  c.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text kafka
2023-05-01 15:41:33 [reactor-http-nio-4] INFO  c.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text kafka
2023-05-01 15:41:33 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@21c6e6cf, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:41:33 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@21c6e6cf, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:41:33 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onSubscribe(FluxMap.MapSubscriber)
2023-05-01 15:41:33 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - request(1)
2023-05-01 15:41:33 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@21c6e6cf, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:41:33 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@21c6e6cf, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:41:33 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@21c6e6cf, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:41:33 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@21c6e6cf, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:41:33 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@21c6e6cf, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:41:33 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@21c6e6cf, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:41:33 [reactor-http-nio-4] ERROR reactor.Flux.Map.1 - onError(org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.)
2023-05-01 15:41:33 [reactor-http-nio-4] ERROR reactor.Flux.Map.1 - 
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:390)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
	at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
	at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
	at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
	at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
	at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
	at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
2023-05-01 15:41:33 [reactor-http-nio-4] ERROR c.m.d.e.q.s.c.a.e.h.ElasticQueryServiceErrorHandler - Service runtime exception!
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ? Handler com.microservices.demo.reactive.elastic.query.service.api.ElasticDocumentController#getDocumentByText(ElasticQueryServiceRequestModel) [DispatcherHandler]
Stack trace:
		at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
		at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
		at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:834)
2023-05-01 15:43:57 [reactor-http-nio-4] INFO  c.m.d.r.e.q.s.b.i.TwitterElasticQueryService - Querying reactive elasticsearch for text kafka
2023-05-01 15:43:57 [reactor-http-nio-4] INFO  c.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text kafka
2023-05-01 15:43:57 [reactor-http-nio-4] INFO  c.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text kafka
2023-05-01 15:43:57 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@79529908, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:43:57 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@79529908, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:43:57 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onSubscribe(FluxMap.MapSubscriber)
2023-05-01 15:43:57 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - request(1)
2023-05-01 15:43:57 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@79529908, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:43:57 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@79529908, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:43:57 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@79529908, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:43:57 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@79529908, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:43:57 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2834794328759471305, userId=3752050796470065930, text=consectetuer adipiscing ultricies Kafka posuere elit, createdAt=2023-04-10T14:54:07))
2023-05-01 15:43:57 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - request(31)
2023-05-01 15:43:58 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2047228697386425307, userId=6785728980837401498, text=lectus Lorem malesuada Kafka congue amet, createdAt=2023-04-10T17:41:50))
2023-05-01 15:43:58 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3494926043643836272, userId=917911293332032217, text=ultricies elit elit Kafka adipiscing malesuada, createdAt=2023-04-10T17:42:30))
2023-05-01 15:43:59 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7883111854985582678, userId=6022290246169221311, text=Maecenas sit ipsum Kafka pulvinar posuere, createdAt=2023-04-09T16:14:01))
2023-05-01 15:43:59 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7358555914463962091, userId=2654785986038430386, text=adipiscing lectus ipsum Kafka amet malesuada, createdAt=2023-04-09T16:18:01))
2023-05-01 15:44:00 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7985872093310983, userId=953917430170654494, text=malesuada elit sit Kafka Lorem massa, createdAt=2023-04-09T16:24:51))
2023-05-01 15:44:00 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2737073004821168687, userId=2363168505835947184, text=ipsum sit purus Kafka ipsum malesuada, createdAt=2023-04-13T12:50:14))
2023-05-01 15:44:01 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8223038971316168232, userId=1608165545569762156, text=congue malesuada ipsum Kafka libero libero, createdAt=2023-04-13T12:50:34))
2023-05-01 15:44:02 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2368654369928068125, userId=4702336457232026228, text=ultricies adipiscing consectetuer Kafka porttitor Maecenas, createdAt=2023-04-13T12:52:34))
2023-05-01 15:44:02 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5197864679481322532, userId=4317477071946899021, text=libero porttitor ultricies Kafka massa Maecenas, createdAt=2023-04-13T14:58:18))
2023-05-01 15:44:03 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8368772642128275171, userId=5213742712946207569, text=sed libero magna Kafka dolor malesuada, createdAt=2023-04-14T09:02:31))
2023-05-01 15:44:03 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1100783847561744974, userId=5413730466183116336, text=elit Fusce sed Kafka congue posuere, createdAt=2023-04-30T15:29:37))
2023-05-01 15:44:04 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4866762539274737848, userId=7511666730954478173, text=congue massa sit Kafka libero magna, createdAt=2023-04-30T15:29:47))
2023-05-01 15:44:04 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6486677150839590513, userId=9110812082254321014, text=libero dolor sit Kafka pulvinar malesuada, createdAt=2023-04-30T15:33:27))
2023-05-01 15:44:05 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2540624921790685484, userId=6905286326944869418, text=ultricies pulvinar dolor Kafka Maecenas congue, createdAt=2023-04-30T15:35:27))
2023-05-01 15:44:05 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3246659090280364175, userId=6349414229960216750, text=Maecenas porttitor dolor Kafka Fusce consectetuer, createdAt=2023-04-10T14:58:17))
2023-05-01 15:44:06 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2554012917600528726, userId=3118601029119090775, text=pulvinar sed sit Kafka malesuada dolor, createdAt=2023-04-10T15:00:57))
2023-05-01 15:44:06 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6099870682340491439, userId=1127499789066066518, text=ultricies congue posuere Kafka consectetuer lectus, createdAt=2023-04-10T15:11:58))
2023-05-01 15:44:07 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8307742631394901157, userId=183406024324730027, text=dolor sit libero Kafka Maecenas consectetuer, createdAt=2023-04-10T15:18:28))
2023-05-01 15:44:07 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5113603647920464227, userId=7986979168428168246, text=ultricies libero sit Kafka Fusce sed, createdAt=2023-04-10T15:26:59))
2023-05-01 15:44:08 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3289896700198144065, userId=2956698008581527067, text=sed adipiscing ipsum Kafka elit Lorem, createdAt=2023-04-10T15:29:29))
2023-05-01 15:44:08 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3850333356137564557, userId=102853470613822693, text=consectetuer libero magna Kafka sed Fusce, createdAt=2023-04-09T16:17:21))
2023-05-01 15:44:09 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=9198205711838176131, userId=866721976071849558, text=porttitor libero sit Kafka amet posuere, createdAt=2023-04-09T16:31:31))
2023-05-01 15:44:09 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1171493891632259809, userId=1832922612667332508, text=massa porttitor consectetuer Kafka congue ultricies, createdAt=2023-04-13T12:44:44))
2023-05-01 15:44:09 [parallel-12] INFO  reactor.Flux.Map.2 - request(24)
2023-05-01 15:44:10 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6859868262726346516, userId=7708317749017748471, text=elit Fusce posuere Kafka ipsum libero, createdAt=2023-04-30T15:36:27))
2023-05-01 15:44:10 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5022662620695749068, userId=5836289767113269840, text=sed pulvinar sed Kafka Fusce purus, createdAt=2023-04-30T15:52:38))
2023-05-01 15:44:11 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7388358141511042873, userId=3265357511136374389, text=pulvinar Maecenas Maecenas elit Kafka porttitor Lorem, createdAt=2023-04-10T17:42:40))
2023-05-01 15:44:11 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6596893421755178279, userId=7966182290242337384, text=adipiscing sit Lorem lectus Kafka malesuada ipsum, createdAt=2023-04-10T17:45:30))
2023-05-01 15:44:12 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8235364587228094738, userId=7373864720332691288, text=ultricies Fusce libero ipsum Kafka libero purus, createdAt=2023-04-10T14:55:17))
2023-05-01 15:44:12 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7439156150926316594, userId=4764757589275025197, text=Maecenas porttitor massa libero Kafka ipsum sit, createdAt=2023-04-10T17:45:20))
2023-05-01 15:44:13 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4011480373822722237, userId=4178551416507187921, text=lectus adipiscing elit amet Kafka adipiscing porttitor, createdAt=2023-04-09T16:17:11))
2023-05-01 15:44:13 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3008450471449061560, userId=4311344047410775191, text=ultricies massa Fusce lectus Kafka Maecenas Fusce, createdAt=2023-04-09T16:22:31))
2023-05-01 15:44:14 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=152281561760920859, userId=6508134168957218994, text=adipiscing magna consectetuer amet Kafka libero sit, createdAt=2023-04-09T16:34:21))
2023-05-01 15:44:14 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1760564804462524490, userId=1653116546270288355, text=ipsum ultricies Lorem consectetuer Kafka Lorem malesuada, createdAt=2023-04-09T16:30:21))
2023-05-01 15:44:15 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1475799767119401641, userId=5117416477003338060, text=magna lectus porttitor pulvinar Kafka massa congue, createdAt=2023-04-09T16:12:01))
2023-05-01 15:44:15 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5723962114042034051, userId=3094694255931804299, text=amet ultricies ipsum Maecenas Kafka sit magna, createdAt=2023-04-13T12:48:44))
2023-05-01 15:44:16 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4515531185607875489, userId=4624155789072602921, text=congue Fusce amet posuere Kafka Lorem ultricies, createdAt=2023-04-13T12:49:54))
2023-05-01 15:44:16 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2188329598566790699, userId=5128713154357617384, text=pulvinar sit purus elit Kafka pulvinar Fusce, createdAt=2023-04-30T15:23:47))
2023-05-01 15:44:17 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=696319983355981031, userId=8829001646846212396, text=consectetuer sed porttitor ipsum Kafka adipiscing amet, createdAt=2023-04-30T15:30:17))
2023-05-01 15:44:17 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4061349606243620436, userId=8471199417672549342, text=libero porttitor congue porttitor Kafka congue malesuada, createdAt=2023-04-10T15:03:37))
2023-05-01 15:44:18 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8601500166346938508, userId=1117894103172556654, text=congue Maecenas consectetuer sit Kafka elit Lorem, createdAt=2023-04-10T15:15:38))
2023-05-01 15:44:18 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4928945208902938120, userId=7716313328377247319, text=libero sit purus ipsum Kafka congue amet, createdAt=2023-04-10T15:16:28))
2023-05-01 15:44:19 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6589997573463374663, userId=4010191246890113080, text=purus sit congue ipsum Kafka Maecenas elit, createdAt=2023-04-09T16:27:21))
2023-05-01 15:44:19 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4253023320097572537, userId=8967405101823839961, text=libero sit pulvinar ultricies Kafka adipiscing dolor, createdAt=2023-04-13T12:44:54))
2023-05-01 15:44:20 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8301331593546085583, userId=1951508931765888814, text=adipiscing malesuada ultricies amet Kafka sit posuere, createdAt=2023-04-13T12:39:43))
2023-05-01 15:44:20 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6672170605317266781, userId=2290009129619744648, text=pulvinar consectetuer magna lectus Kafka pulvinar ipsum, createdAt=2023-04-13T15:00:08))
2023-05-01 15:44:21 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1306370540746074494, userId=4797843838530289014, text=ipsum purus libero consectetuer Kafka dolor malesuada, createdAt=2023-04-27T14:19:09))
2023-05-01 15:44:21 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7250971597663820988, userId=1387271540147101729, text=ipsum elit sit lectus Kafka purus pulvinar, createdAt=2023-04-27T14:19:19))
2023-05-01 15:44:22 [parallel-12] INFO  reactor.Flux.Map.2 - request(24)
2023-05-01 15:44:22 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6074261734836691900, userId=2616510737616808563, text=dolor Fusce Maecenas consectetuer Kafka amet magna Maecenas, createdAt=2023-04-10T17:42:10))
2023-05-01 15:44:23 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8784762900012453203, userId=3280971392659626009, text=Fusce elit libero libero Kafka congue massa lectus, createdAt=2023-04-10T17:44))
2023-05-01 15:44:23 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7994579144133740078, userId=402788064397395709, text=ipsum adipiscing Lorem porttitor Kafka purus lectus dolor, createdAt=2023-04-13T13:53:59))
2023-05-01 15:44:24 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8371619521662772945, userId=743746168562611455, text=ipsum libero sed lectus Kafka Maecenas sit adipiscing, createdAt=2023-04-09T16:26:11))
2023-05-01 15:44:24 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1750693270502512236, userId=8744843913257350724, text=purus amet sit porttitor Kafka porttitor congue posuere, createdAt=2023-04-13T15:02))
2023-05-01 15:44:25 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3437694121533376660, userId=1375415570933882463, text=consectetuer massa libero sit Kafka Maecenas malesuada sit, createdAt=2023-04-13T12:46:24))
2023-05-01 15:44:25 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5201455059028971571, userId=820157330845636907, text=massa lectus Fusce dolor Kafka libero elit congue, createdAt=2023-04-13T12:46:54))
2023-05-01 15:44:26 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1254881392335619344, userId=8847426039861261875, text=lectus congue malesuada elit Kafka Lorem dolor consectetuer, createdAt=2023-04-13T12:53:24))
2023-05-01 15:44:26 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=9139680001075376411, userId=4578775589772504531, text=sit Fusce elit pulvinar Kafka dolor ipsum adipiscing, createdAt=2023-04-13T12:57:43))
2023-05-01 15:44:27 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7659798344317025200, userId=9039547582984160928, text=massa ultricies massa adipiscing Kafka Maecenas consectetuer sed, createdAt=2023-04-13T13:01:43))
2023-05-01 15:44:27 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8913400969585254670, userId=4466847970078391085, text=Lorem Fusce porttitor pulvinar Kafka adipiscing posuere congue, createdAt=2023-04-30T15:24:37))
2023-05-01 15:44:28 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7676809550626424134, userId=1400261499295213876, text=libero sit sed dolor Kafka sit massa congue, createdAt=2023-04-30T15:27:07))
2023-05-01 15:44:28 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5760958339894247356, userId=3277517001275201178, text=Lorem Lorem massa posuere Kafka magna sed posuere, createdAt=2023-04-27T14:32:20))
2023-05-01 15:44:29 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4223397873493641434, userId=4452373160820125599, text=ipsum ultricies pulvinar posuere Kafka sit Lorem malesuada, createdAt=2023-04-10T15:09:28))
2023-05-01 15:44:29 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=160993947075415313, userId=6583225672951717151, text=adipiscing consectetuer sed magna Kafka ultricies amet posuere, createdAt=2023-04-10T15:17:18))
2023-05-01 15:44:30 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=224016093751667434, userId=7236423964182492773, text=malesuada dolor malesuada dolor Kafka ultricies libero libero, createdAt=2023-04-10T15:20:38))
2023-05-01 15:44:30 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4184870870788119343, userId=1265552250054316947, text=dolor porttitor ultricies malesuada Kafka congue Lorem malesuada, createdAt=2023-04-10T15:24:19))
2023-05-01 15:44:31 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5393214075155687334, userId=7899280164921637463, text=ipsum ultricies Fusce elit Kafka Fusce Fusce pulvinar, createdAt=2023-04-10T15:30:19))
2023-05-01 15:44:31 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6170727987103681757, userId=7702916996874470558, text=magna congue dolor massa Kafka adipiscing posuere Maecenas, createdAt=2023-04-10T15:33:29))
2023-05-01 15:44:32 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3877914558004768792, userId=7646664489564603884, text=adipiscing dolor ultricies amet Kafka libero sit ultricies, createdAt=2023-04-10T15:34:09))
2023-05-01 15:44:32 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4785373621506077878, userId=7888265648177202440, text=magna dolor sed magna Kafka posuere sit dolor, createdAt=2023-04-09T16:33:11))
2023-05-01 15:44:33 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8705750645536323023, userId=4261169777835314280, text=purus Maecenas ultricies consectetuer Kafka libero porttitor purus, createdAt=2023-04-13T12:39:54))
2023-05-01 15:44:33 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4053136406678554666, userId=5227060551003444728, text=elit posuere congue consectetuer Kafka posuere porttitor sed, createdAt=2023-04-13T18:29:39))
2023-05-01 15:44:34 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7190032562632373929, userId=7928309414717505391, text=adipiscing adipiscing Maecenas Fusce Fusce Kafka ipsum porttitor sit, createdAt=2023-04-09T16:28:41))
2023-05-01 15:44:34 [parallel-12] INFO  reactor.Flux.Map.2 - request(24)
2023-05-01 15:44:34 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=9088374698713017330, userId=7167833361202290630, text=pulvinar massa sit congue dolor Kafka Lorem purus lectus, createdAt=2023-04-09T16:13:31))
2023-05-01 15:44:35 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3643006637901333343, userId=2108795996725470431, text=consectetuer dolor massa posuere Lorem Kafka sit consectetuer Maecenas, createdAt=2023-04-13T15:03:20))
2023-05-01 15:44:35 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=777971531074783565, userId=4158513886261333233, text=sit elit lectus ipsum Fusce Kafka consectetuer congue adipiscing, createdAt=2023-04-13T15:07))
2023-05-01 15:44:36 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3335770015258728996, userId=4663676952996880576, text=congue libero porttitor porttitor ipsum Kafka sit amet consectetuer, createdAt=2023-04-13T15:04))
2023-05-01 15:44:36 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3197985867486325067, userId=8968312288200882065, text=dolor amet posuere sit malesuada Kafka posuere ipsum ultricies, createdAt=2023-04-13T12:59:43))
2023-05-01 15:44:37 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2553279608863315973, userId=5357554061135844479, text=pulvinar ultricies magna pulvinar pulvinar Kafka dolor magna sed, createdAt=2023-04-14T08:59:21))
2023-05-01 15:44:37 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3558040380134676425, userId=2097688308158771591, text=dolor adipiscing amet Maecenas sed Kafka Maecenas dolor congue, createdAt=2023-04-30T15:30:47))
2023-05-01 15:44:38 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=9038108193956733360, userId=3893297808971657876, text=dolor ipsum purus ultricies ipsum Kafka ipsum porttitor Maecenas, createdAt=2023-04-27T14:25:59))
2023-05-01 15:44:38 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5225954155428411136, userId=3768367546706888913, text=malesuada libero purus elit sed Kafka ipsum massa porttitor, createdAt=2023-04-27T14:30:39))
2023-05-01 15:44:39 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7750485477945542498, userId=5481054756204225341, text=magna congue malesuada amet posuere Kafka malesuada ipsum sed, createdAt=2023-04-27T14:31:50))
2023-05-01 15:44:39 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2753424714212162700, userId=1196663786275669208, text=massa sit lectus sit ipsum Kafka Lorem purus libero, createdAt=2023-04-10T15:01:07))
2023-05-01 15:44:40 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2091892523630502007, userId=5227945342100384361, text=Fusce porttitor dolor dolor dolor Kafka congue dolor pulvinar, createdAt=2023-04-10T15:09:38))
2023-05-01 15:44:40 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3064022264526449324, userId=1461001302510164690, text=Maecenas libero magna posuere Fusce Kafka purus ultricies purus, createdAt=2023-04-10T15:14:08))
2023-05-01 15:44:41 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6702191165067280396, userId=7978331913898931318, text=massa consectetuer porttitor amet sed Kafka massa purus Maecenas, createdAt=2023-04-10T15:19:28))
2023-05-01 15:44:41 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5935526302659995911, userId=8368042078511237386, text=sit pulvinar Maecenas pulvinar amet Kafka adipiscing purus ipsum, createdAt=2023-04-10T15:27:39))
2023-05-01 15:44:42 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=582419195535965077, userId=8615742568337791913, text=Maecenas congue congue Maecenas Lorem Kafka amet libero Lorem, createdAt=2023-04-09T16:39:12))
2023-05-01 15:44:43 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=510827574955514665, userId=6002436461780135824, text=massa congue ultricies ultricies Maecenas Kafka libero posuere porttitor, createdAt=2023-04-09T16:39:32))
2023-05-01 15:44:43 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2795441876922039553, userId=6429765223147433265, text=ultricies massa amet amet elit Kafka amet libero massa, createdAt=2023-04-13T12:41:34))
2023-05-01 15:44:44 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=650919987056491852, userId=3748789371463832375, text=Fusce massa massa elit dolor Kafka sit adipiscing lectus, createdAt=2023-04-14T08:57:41))
2023-05-01 15:44:44 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1301818598692873362, userId=7902940536228359241, text=pulvinar sed ipsum dolor libero Kafka massa adipiscing adipiscing, createdAt=2023-04-14T09:00:51))
2023-05-01 15:44:45 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6882532423759482833, userId=6697720978089044699, text=Maecenas elit porttitor Maecenas amet Kafka ipsum ipsum lectus, createdAt=2023-04-30T15:51:28))
2023-05-01 15:44:45 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1738868668715547352, userId=5257854248219611170, text=Maecenas libero lectus Lorem porttitor Kafka posuere pulvinar ultricies adipiscing, createdAt=2023-04-10T17:41:20))
2023-05-01 15:44:46 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3507195877715526580, userId=1172782492039043931, text=ultricies adipiscing malesuada ipsum amet Kafka congue purus massa Lorem, createdAt=2023-04-09T16:34:51))
2023-05-01 15:44:46 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8431705697188275869, userId=7620093322754923502, text=Fusce posuere ultricies lectus Lorem Kafka sit pulvinar ipsum Fusce, createdAt=2023-04-13T13:57:10))
2023-05-01 15:44:46 [parallel-12] INFO  reactor.Flux.Map.2 - request(24)
2023-05-01 15:44:47 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1354027321099670398, userId=9069733304585333936, text=elit Lorem elit congue lectus Kafka malesuada consectetuer Maecenas elit, createdAt=2023-04-13T15:01))
2023-05-01 15:44:47 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3833853006458019016, userId=811220454896010974, text=libero dolor posuere massa ipsum Kafka Fusce dolor Maecenas sit, createdAt=2023-04-13T15:01:40))
2023-05-01 15:44:48 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=871004575584428322, userId=7087297516438808157, text=amet massa amet ipsum ipsum Kafka elit porttitor elit elit, createdAt=2023-04-13T15:06:30))
2023-05-01 15:44:48 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6878152143245955570, userId=5656974085512012562, text=adipiscing posuere ipsum sed ipsum Kafka Lorem sit pulvinar sit, createdAt=2023-04-13T12:53:14))
2023-05-01 15:44:49 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8992234569755100816, userId=4500298664409444428, text=sit Maecenas ipsum sit libero Kafka amet dolor libero elit, createdAt=2023-04-13T12:56:03))
2023-05-01 15:44:49 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6218807399379143960, userId=2086738472965237927, text=ultricies congue lectus consectetuer Maecenas Kafka Lorem congue pulvinar ultricies, createdAt=2023-04-14T09:01:51))
2023-05-01 15:44:50 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4510200484589748182, userId=5444882390500057634, text=Lorem Maecenas consectetuer Maecenas adipiscing Kafka amet Lorem ultricies congue, createdAt=2023-04-30T15:23:07))
2023-05-01 15:44:50 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4027427194067802750, userId=3918533177591319902, text=pulvinar Lorem Fusce Lorem lectus Kafka adipiscing sed dolor adipiscing, createdAt=2023-04-27T14:28:49))
2023-05-01 15:44:51 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3336096218588189533, userId=4254550642788260667, text=posuere Maecenas lectus consectetuer amet Kafka elit porttitor Lorem amet, createdAt=2023-04-27T14:31:39))
2023-05-01 15:44:51 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5941111791474484692, userId=1965584887434438545, text=sit Lorem purus purus sed Kafka sed sed ultricies amet, createdAt=2023-04-10T15:11:48))
2023-05-01 15:44:52 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3473197285352333236, userId=804160890349942634, text=ultricies libero pulvinar Fusce libero Kafka porttitor sed Lorem pulvinar, createdAt=2023-04-10T15:15:28))
2023-05-01 15:44:52 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6650399880793614119, userId=6044150168616670867, text=adipiscing sit posuere pulvinar amet Kafka massa purus libero pulvinar, createdAt=2023-04-10T15:19:08))
2023-05-01 15:44:53 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8089338809097905358, userId=7634500974205620556, text=sed dolor dolor lectus posuere Kafka Maecenas sed sed porttitor, createdAt=2023-04-14T09:00:41))
2023-05-01 15:44:53 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1982758989904996553, userId=921423505689347870, text=magna ipsum dolor sed porttitor Kafka ultricies ultricies sed pulvinar, createdAt=2023-04-27T14:20:29))
2023-05-01 15:44:54 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2116123696308925615, userId=3824989895372406721, text=consectetuer ultricies dolor sed elit Kafka consectetuer dolor adipiscing consectetuer, createdAt=2023-04-30T15:50:48))
2023-05-01 15:44:54 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8160777435391889875, userId=4516520579481231854, text=consectetuer consectetuer purus porttitor dolor ipsum Kafka sed dolor congue congue, createdAt=2023-04-10T14:54:47))
2023-05-01 15:44:55 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3970200550781515744, userId=4695085014616697327, text=purus porttitor consectetuer massa posuere adipiscing Kafka Fusce porttitor posuere ultricies, createdAt=2023-04-10T14:57:17))
2023-05-01 15:44:55 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8924536866749828615, userId=2823481659121438593, text=purus adipiscing adipiscing Lorem malesuada congue Kafka adipiscing massa Maecenas ipsum, createdAt=2023-04-09T16:10:10))
2023-05-01 15:44:56 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5970309500212227781, userId=4438623905483938088, text=congue elit massa posuere consectetuer posuere Kafka consectetuer massa purus libero, createdAt=2023-04-09T16:15:41))
2023-05-01 15:44:56 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4061943464067191108, userId=197052917148085082, text=malesuada dolor massa congue ipsum purus Kafka consectetuer libero ultricies massa, createdAt=2023-04-13T15:04:20))
2023-05-01 15:44:57 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3145364152488793447, userId=5797102844557812030, text=massa purus Maecenas sed sit adipiscing Kafka pulvinar massa malesuada malesuada, createdAt=2023-04-13T12:59:53))
2023-05-01 15:44:57 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4392568824811616432, userId=3947426733751790255, text=Fusce elit Lorem malesuada ultricies adipiscing Kafka pulvinar sit amet massa, createdAt=2023-04-13T13:49:04))
2023-05-01 15:44:58 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2918534219493972920, userId=6992239282747584272, text=Maecenas ipsum porttitor sed porttitor lectus Kafka elit massa lectus libero, createdAt=2023-04-30T15:30:07))
2023-05-01 15:44:58 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8341034132616923554, userId=1633715886400146142, text=ultricies sed porttitor ultricies libero congue Kafka purus sed Maecenas pulvinar, createdAt=2023-04-10T15:08:58))
2023-05-01 15:44:58 [parallel-12] INFO  reactor.Flux.Map.2 - request(24)
2023-05-01 15:44:59 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4874461160139002092, userId=929302605892220701, text=posuere posuere posuere lectus adipiscing sit Kafka sit posuere Maecenas Maecenas, createdAt=2023-04-10T15:17:28))
2023-05-01 15:44:59 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2073136208181542440, userId=7176389068539445341, text=Lorem dolor ultricies adipiscing ipsum amet Kafka porttitor Fusce libero porttitor, createdAt=2023-04-10T15:20:58))
2023-05-01 15:45:00 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3553637194695159749, userId=5529001563948527460, text=amet dolor posuere purus lectus posuere Kafka magna adipiscing amet massa, createdAt=2023-04-10T15:24:49))
2023-05-01 15:45:00 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6202082400068763943, userId=3896368864892570071, text=dolor magna Lorem lectus lectus massa Kafka lectus ipsum lectus sit, createdAt=2023-04-10T15:25:59))
2023-05-01 15:45:01 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8342882023479556487, userId=4923061302784715607, text=purus sit magna Lorem malesuada amet Kafka sit ipsum elit adipiscing, createdAt=2023-04-10T15:26:19))
2023-05-01 15:45:01 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6814101962875359125, userId=6377190763194944495, text=ipsum lectus ultricies Lorem ipsum sed Kafka ultricies congue Lorem adipiscing, createdAt=2023-04-10T15:27:19))
2023-05-01 15:45:02 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8888761605617196737, userId=5784283761228420528, text=ultricies ultricies Lorem Maecenas Maecenas lectus Kafka Maecenas lectus elit consectetuer, createdAt=2023-04-10T15:31:09))
2023-05-01 15:45:02 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3490173407358336243, userId=8824245907242017163, text=ipsum sit Fusce amet magna pulvinar Kafka sed porttitor Maecenas posuere, createdAt=2023-04-10T15:32:49))
2023-05-01 15:45:03 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=219385774527207244, userId=6781749578113392057, text=sed massa magna sed Fusce ultricies Kafka dolor ultricies consectetuer libero, createdAt=2023-04-09T16:17:31))
2023-05-01 15:45:04 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3213910942912018154, userId=8469849287923756809, text=amet consectetuer lectus adipiscing dolor lectus Kafka ultricies massa sit Lorem, createdAt=2023-04-09T16:23:01))
2023-05-01 15:45:04 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7606695079153651346, userId=3330271282271840309, text=lectus posuere porttitor consectetuer adipiscing dolor Kafka malesuada adipiscing Lorem Maecenas, createdAt=2023-04-09T16:38:02))
2023-05-01 15:45:05 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7935994212407739884, userId=8617598464719400825, text=posuere dolor congue amet elit Maecenas Kafka adipiscing elit porttitor amet, createdAt=2023-04-13T12:44:14))
2023-05-01 15:45:05 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2107038022384423292, userId=4591290355493328328, text=pulvinar sed malesuada adipiscing posuere magna Kafka amet Fusce sed Maecenas, createdAt=2023-04-13T15:00:28))
2023-05-01 15:45:06 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=550305807173005350, userId=4793906907375062035, text=amet posuere libero Maecenas massa congue Kafka porttitor lectus malesuada posuere, createdAt=2023-04-14T08:57:11))
2023-05-01 15:45:06 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2547712592245114233, userId=3906616674324702758, text=magna elit libero massa elit Maecenas Kafka ipsum amet malesuada ultricies, createdAt=2023-04-30T15:48:07))
2023-05-01 15:45:07 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4181791931629573095, userId=9182137075861150071, text=purus elit pulvinar magna dolor malesuada Kafka malesuada porttitor Fusce Maecenas Lorem, createdAt=2023-04-10T14:56:37))
2023-05-01 15:45:07 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5389602284136533957, userId=587959315340469305, text=elit Maecenas libero dolor Lorem magna Kafka adipiscing porttitor pulvinar congue elit, createdAt=2023-04-09T16:19:21))
2023-05-01 15:45:08 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5591362330335856546, userId=4551492176450393794, text=massa Lorem posuere massa purus amet Kafka pulvinar pulvinar porttitor Maecenas porttitor, createdAt=2023-04-09T16:12:41))
2023-05-01 15:45:08 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8586042752178668924, userId=4273901032938130380, text=Fusce lectus elit purus ipsum ipsum Kafka Fusce magna Fusce porttitor elit, createdAt=2023-04-09T16:15:11))
2023-05-01 15:45:09 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4306807528553158054, userId=6985906953283614756, text=magna ipsum Lorem magna pulvinar porttitor Kafka Lorem Lorem malesuada massa amet, createdAt=2023-04-13T15:01:50))
2023-05-01 15:45:09 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8821754058152217041, userId=2275269869495033892, text=consectetuer ultricies Lorem posuere magna Fusce Kafka libero malesuada Lorem dolor Fusce, createdAt=2023-04-13T12:57:03))
2023-05-01 15:45:10 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4212636873923107385, userId=6337033494847913794, text=purus posuere Fusce elit ultricies malesuada Kafka ipsum posuere Lorem elit consectetuer, createdAt=2023-04-13T12:59:03))
2023-05-01 15:45:10 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=280629368400560702, userId=5294337956648668116, text=lectus Fusce Lorem porttitor magna porttitor Kafka adipiscing consectetuer lectus magna adipiscing, createdAt=2023-04-14T08:58:51))
2023-05-01 15:45:11 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=9154332962449727211, userId=1464071887628937008, text=malesuada congue Maecenas malesuada consectetuer adipiscing Kafka dolor Lorem congue amet purus, createdAt=2023-04-30T15:24:27))
2023-05-01 15:45:11 [parallel-12] INFO  reactor.Flux.Map.2 - request(24)
2023-05-01 15:45:11 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3125422334204260945, userId=4169243261726906085, text=ipsum Maecenas Fusce congue ultricies Lorem Kafka dolor sit adipiscing porttitor posuere, createdAt=2023-04-27T14:26:49))
2023-05-01 15:45:12 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7745001868808560496, userId=5806266676445126856, text=posuere dolor purus consectetuer dolor Fusce Kafka adipiscing amet congue posuere Fusce, createdAt=2023-04-10T15:24:09))
2023-05-01 15:45:12 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=985181806221068007, userId=4985798382188045406, text=Fusce adipiscing purus posuere amet sed Kafka ipsum porttitor massa massa Lorem, createdAt=2023-04-10T15:31:39))
2023-05-01 15:45:13 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2442369350365124402, userId=8428093867844178611, text=congue adipiscing purus Lorem massa pulvinar Kafka porttitor adipiscing consectetuer Lorem magna, createdAt=2023-04-09T16:31:51))
2023-05-01 15:45:13 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8533762463312598390, userId=5784487787582372884, text=Maecenas malesuada purus massa pulvinar massa Kafka porttitor purus libero dolor Maecenas, createdAt=2023-04-09T16:29:21))
2023-05-01 15:45:14 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5179868232939022082, userId=2264876260610301821, text=amet magna adipiscing ipsum pulvinar porttitor Kafka Lorem massa purus libero massa, createdAt=2023-04-09T16:39:02))
2023-05-01 15:45:14 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2205493998245753162, userId=2122219774228690800, text=massa pulvinar elit sed ipsum ipsum Kafka ipsum amet sed dolor Maecenas, createdAt=2023-04-13T18:30:29))
2023-05-01 15:45:15 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2042612932864425184, userId=5185002440530397157, text=libero posuere posuere massa Lorem dolor Kafka adipiscing magna malesuada Lorem massa, createdAt=2023-04-30T15:49:58))
2023-05-01 15:45:15 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7689109812247367580, userId=944346768399528409, text=massa ipsum adipiscing ipsum pulvinar posuere sit Kafka adipiscing libero lectus ipsum amet, createdAt=2023-04-10T14:53:47))
2023-05-01 15:45:16 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7472315024435229984, userId=2160744317755321171, text=ultricies pulvinar Maecenas massa dolor ultricies ipsum Kafka lectus massa Maecenas malesuada malesuada, createdAt=2023-04-10T14:55:47))
2023-05-01 15:45:16 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1692289915445840211, userId=7546094239126147193, text=Lorem libero ipsum libero Fusce posuere sed Kafka lectus adipiscing Fusce libero consectetuer, createdAt=2023-04-10T14:58:47))
2023-05-01 15:45:17 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3528895711228317686, userId=2338363047555927722, text=ipsum consectetuer magna Fusce Maecenas magna sit Kafka Lorem ultricies libero Lorem libero, createdAt=2023-04-09T16:17:51))
2023-05-01 15:45:17 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8094131486072890691, userId=4649077265988933023, text=libero elit congue lectus ultricies ipsum libero Kafka adipiscing Lorem sed Maecenas purus, createdAt=2023-04-09T16:19:11))
2023-05-01 15:45:18 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8636447685046497256, userId=3982070066341739029, text=magna adipiscing amet consectetuer libero magna ipsum Kafka Maecenas Fusce Fusce Fusce magna, createdAt=2023-04-13T13:56:09))
2023-05-01 15:45:18 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8053888060207623005, userId=5385600580902365570, text=Lorem Fusce congue amet congue libero Maecenas Kafka dolor dolor Maecenas magna ultricies, createdAt=2023-04-13T15:07:20))
2023-05-01 15:45:19 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7189474366377305203, userId=9042566011458525525, text=purus amet Maecenas Fusce porttitor elit adipiscing Kafka libero pulvinar congue pulvinar magna, createdAt=2023-04-13T15:06:10))
2023-05-01 15:45:19 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7312343199061417166, userId=8113038756859012763, text=Maecenas Lorem adipiscing dolor libero consectetuer libero Kafka malesuada Lorem purus amet elit, createdAt=2023-04-13T15:05:20))
2023-05-01 15:45:20 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6427423819396249218, userId=5387969681316521547, text=Fusce libero lectus congue libero Lorem elit Kafka Lorem purus ipsum sed purus, createdAt=2023-04-13T12:56:43))
2023-05-01 15:45:20 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5209043609078366213, userId=2464904734924959091, text=sed porttitor sed congue ultricies lectus amet Kafka adipiscing massa adipiscing libero congue, createdAt=2023-04-13T12:58:33))
2023-05-01 15:45:21 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4431496374889892690, userId=3829780099443616938, text=pulvinar Maecenas sed Maecenas ipsum purus pulvinar Kafka pulvinar Fusce Lorem malesuada Fusce, createdAt=2023-04-30T15:30:57))
2023-05-01 15:45:21 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1676791245333063825, userId=2310827947471559943, text=libero massa dolor amet sit consectetuer consectetuer Kafka adipiscing purus dolor posuere porttitor, createdAt=2023-04-27T14:21:19))
2023-05-01 15:45:22 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8612704426246903169, userId=1484931183266570676, text=magna Maecenas purus Lorem pulvinar amet porttitor Kafka Maecenas ultricies ipsum congue ultricies, createdAt=2023-04-27T14:28:29))
2023-05-01 15:45:22 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8577636883717279134, userId=452093764670937141, text=porttitor sit amet lectus magna malesuada sit Kafka porttitor pulvinar sed Fusce sed, createdAt=2023-04-27T14:32))
2023-05-01 15:45:23 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7215509144208245250, userId=2892705387435385403, text=Lorem consectetuer Lorem elit magna purus posuere Kafka lectus elit ultricies pulvinar sed, createdAt=2023-04-10T15:03:27))
2023-05-01 15:45:23 [parallel-12] INFO  reactor.Flux.Map.2 - request(24)
2023-05-01 15:45:24 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2266583809786107483, userId=2562970752381137060, text=magna sit sit congue magna massa libero Kafka consectetuer sed magna lectus consectetuer, createdAt=2023-04-10T15:22:28))
2023-05-01 15:45:24 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3020617305305540732, userId=7377038116586252633, text=magna lectus Lorem Lorem lectus consectetuer amet Kafka purus lectus sed massa amet, createdAt=2023-04-10T15:26:29))
2023-05-01 15:45:25 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=47885202752682048, userId=8968794315744958586, text=massa Fusce Fusce elit amet adipiscing ultricies Kafka adipiscing adipiscing dolor sed magna, createdAt=2023-04-10T15:28:29))
2023-05-01 15:45:25 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1307036299209719167, userId=1537663079589304962, text=ipsum elit ipsum adipiscing Fusce sed amet Kafka elit sed magna sed posuere, createdAt=2023-04-10T15:31:59))
2023-05-01 15:45:26 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1573692938200814528, userId=1869829855845994785, text=congue consectetuer ultricies dolor pulvinar sed Lorem Kafka lectus ipsum sit Lorem sed, createdAt=2023-04-09T16:13:51))
2023-05-01 15:45:26 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7664388867012623220, userId=2923214418534400173, text=purus ultricies porttitor posuere sit lectus adipiscing Kafka ultricies adipiscing pulvinar Lorem ipsum, createdAt=2023-04-09T16:20:51))
2023-05-01 15:45:27 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4611070237009799204, userId=8233558441229795920, text=adipiscing Lorem purus posuere massa dolor magna Kafka pulvinar adipiscing libero purus malesuada, createdAt=2023-04-13T12:42:34))
2023-05-01 15:45:27 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1329419505442579132, userId=6456064560373440484, text=porttitor massa lectus congue lectus amet ultricies Kafka massa libero posuere ultricies adipiscing, createdAt=2023-04-13T12:44:04))
2023-05-01 15:45:28 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6951881551719870365, userId=7151375842666680460, text=Maecenas sed malesuada amet purus ipsum adipiscing Kafka amet adipiscing posuere sit sed, createdAt=2023-04-13T14:59:18))
2023-05-01 15:45:28 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8957331915682731886, userId=8964240701112393235, text=pulvinar Fusce massa Fusce ultricies sit sed Kafka porttitor pulvinar amet sed congue, createdAt=2023-04-14T09:25:13))
2023-05-01 15:45:29 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7666628668729218927, userId=2295273347142916900, text=Fusce libero malesuada sed posuere ipsum Maecenas Kafka adipiscing purus lectus sit adipiscing, createdAt=2023-04-30T15:50:28))
2023-05-01 15:45:29 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1151468202102854022, userId=742757571907151370, text=elit magna malesuada sit dolor pulvinar massa Kafka consectetuer posuere consectetuer congue sit Fusce, createdAt=2023-04-09T16:31:01))
2023-05-01 15:45:30 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5726169961124386703, userId=6769027007680875674, text=posuere massa Maecenas sed sit magna malesuada Kafka sit elit amet lectus purus dolor, createdAt=2023-04-09T16:35:22))
2023-05-01 15:45:30 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=9042435191286969565, userId=2099933662888995688, text=porttitor congue adipiscing magna sit dolor Maecenas Kafka posuere adipiscing Fusce elit dolor porttitor, createdAt=2023-04-09T16:16:31))
2023-05-01 15:45:31 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1283347859192776922, userId=5684529297395458082, text=dolor sed purus pulvinar congue libero lectus Kafka pulvinar amet ultricies dolor posuere adipiscing, createdAt=2023-04-13T13:54:49))
2023-05-01 15:45:31 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=89047309479275837, userId=3138898003534983088, text=adipiscing amet dolor adipiscing Maecenas elit ultricies Kafka massa dolor pulvinar Maecenas lectus ipsum, createdAt=2023-04-13T13:55:39))
2023-05-01 15:45:32 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8069985521987541819, userId=1615995047400514661, text=sed posuere pulvinar amet dolor lectus ipsum Kafka sit amet sit posuere sit posuere, createdAt=2023-04-13T15:05:30))
2023-05-01 15:45:32 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2799354947889511790, userId=7247160773423471949, text=lectus Fusce libero adipiscing lectus posuere lectus Kafka porttitor ipsum purus adipiscing elit lectus, createdAt=2023-04-13T12:49:44))
2023-05-01 15:45:33 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5923124691529319056, userId=461233922895909242, text=dolor dolor massa malesuada Fusce adipiscing sed Kafka malesuada ultricies libero pulvinar pulvinar ultricies, createdAt=2023-04-13T12:56:33))
2023-05-01 15:45:33 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=9168930096366205428, userId=3111466906094418844, text=amet adipiscing adipiscing congue congue adipiscing libero Kafka Fusce ipsum dolor pulvinar consectetuer magna, createdAt=2023-04-14T09:24:53))
2023-05-01 15:45:34 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5748315003992579868, userId=2022263968087725587, text=lectus posuere pulvinar adipiscing ipsum lectus lectus Kafka massa lectus sit dolor adipiscing amet, createdAt=2023-04-14T09:02:21))
2023-05-01 15:45:34 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=789281320459851608, userId=3483669436043502735, text=consectetuer magna dolor congue purus Fusce sed Kafka porttitor purus sit congue Fusce Maecenas, createdAt=2023-04-30T15:29:17))
2023-05-01 15:45:35 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6832855046574727922, userId=604616093365417083, text=pulvinar adipiscing sed dolor sed ultricies sed Kafka dolor Fusce ultricies posuere massa dolor, createdAt=2023-04-30T15:33:07))
2023-05-01 15:45:35 [parallel-11] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@79529908, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:45:35 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@79529908, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2023-05-01 15:45:35 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=843566368374926464, userId=2290508172337584484, text=amet adipiscing malesuada Fusce lectus libero lectus Kafka ipsum adipiscing Maecenas elit purus dolor, createdAt=2023-04-10T15:22:59))
2023-05-01 15:45:35 [parallel-12] INFO  reactor.Flux.Map.2 - request(24)
2023-05-01 15:45:36 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6390863243575039397, userId=4012319493680488917, text=amet malesuada purus adipiscing sit amet ipsum Kafka massa sit malesuada massa adipiscing posuere, createdAt=2023-04-10T15:24:39))
2023-05-01 15:45:36 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=174622569312467430, userId=2267801664262979343, text=magna posuere adipiscing lectus Maecenas malesuada elit Kafka ultricies adipiscing congue ultricies adipiscing Lorem, createdAt=2023-04-10T15:25:29))
2023-05-01 15:45:37 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5341494589669431625, userId=1765615530092912297, text=lectus purus sit consectetuer pulvinar ultricies libero Kafka Fusce elit pulvinar sed adipiscing magna, createdAt=2023-04-10T15:29:49))
2023-05-01 15:45:37 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1100662227150316397, userId=2770425610195590483, text=Maecenas sit amet Maecenas ultricies libero Maecenas Kafka sit sit posuere magna sit porttitor, createdAt=2023-04-10T15:33:09))
2023-05-01 15:45:38 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2915982237317637343, userId=8364572188461514489, text=magna Lorem libero ultricies Fusce consectetuer posuere Kafka Lorem sit ipsum porttitor ipsum Lorem, createdAt=2023-04-10T15:33:59))
2023-05-01 15:45:38 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=814533267615975776, userId=8784773069986423628, text=massa ipsum libero magna ultricies consectetuer sit Kafka porttitor Maecenas amet Lorem pulvinar malesuada, createdAt=2023-04-10T15:34:19))
2023-05-01 15:45:39 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8906420327947069063, userId=8277127443255709381, text=dolor consectetuer consectetuer purus magna ultricies ultricies Kafka ipsum Maecenas elit Fusce porttitor porttitor, createdAt=2023-04-09T16:13:11))
2023-05-01 15:45:39 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8849967267469409795, userId=8927341344123776186, text=pulvinar Fusce Fusce libero Fusce amet Lorem Kafka massa purus purus massa magna Fusce, createdAt=2023-04-09T16:29:01))
2023-05-01 15:45:40 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=9107161782098060831, userId=4657088591079004689, text=posuere ultricies sed amet Lorem consectetuer ultricies Kafka purus porttitor porttitor magna ipsum Lorem, createdAt=2023-04-09T16:37:42))
2023-05-01 15:45:40 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3888229286517206705, userId=6412073380911172104, text=purus malesuada purus massa libero Fusce consectetuer Kafka Maecenas massa Maecenas sit Maecenas sed, createdAt=2023-04-13T12:40:34))
2023-05-01 15:45:41 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4319945300610446608, userId=5560166533293324234, text=dolor porttitor purus purus Lorem massa ultricies Kafka lectus elit posuere amet adipiscing Lorem, createdAt=2023-04-13T12:40:44))
2023-05-01 15:45:41 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7538564568134707648, userId=3445092138047964170, text=dolor adipiscing ultricies magna consectetuer posuere pulvinar Kafka ultricies amet adipiscing adipiscing posuere sed, createdAt=2023-04-13T18:29:49))
2023-05-01 15:45:42 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3028049102292393655, userId=4652544278482170493, text=ultricies adipiscing purus Fusce Fusce consectetuer magna elit Kafka Lorem adipiscing Fusce malesuada purus ultricies, createdAt=2023-04-10T14:57:27))
2023-05-01 15:45:42 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4037823374849181689, userId=3481466616869902495, text=posuere adipiscing libero ipsum sed massa Fusce pulvinar Kafka dolor adipiscing purus Maecenas sed amet, createdAt=2023-04-09T16:27:11))
2023-05-01 15:45:43 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8600685526563344131, userId=6226289756228889566, text=posuere Maecenas libero ipsum lectus sit congue dolor Kafka sed Fusce ipsum sit ultricies libero, createdAt=2023-04-09T16:31:21))
2023-05-01 15:45:43 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3521046566439948935, userId=294042496099965080, text=Maecenas libero ipsum ultricies massa massa libero pulvinar Kafka dolor adipiscing ultricies dolor malesuada consectetuer, createdAt=2023-04-09T16:20:11))
2023-05-01 15:45:44 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3790155225871830865, userId=956437029079841800, text=ipsum amet libero ipsum purus ipsum sed sit Kafka malesuada adipiscing congue dolor libero magna, createdAt=2023-04-13T15:02:30))
2023-05-01 15:45:45 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3906382618630278757, userId=2628549355744292573, text=libero porttitor libero ipsum Maecenas Lorem dolor malesuada Kafka libero posuere Fusce Fusce congue magna, createdAt=2023-04-13T15:05:10))
2023-05-01 15:45:45 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2306205885694509546, userId=3741759638862235414, text=libero magna posuere malesuada lectus magna sed magna Kafka porttitor purus ipsum Maecenas purus ultricies, createdAt=2023-04-13T15:04:50))
2023-05-01 15:45:46 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=639142374099833545, userId=5119384653052653304, text=sed libero consectetuer Lorem magna dolor Lorem pulvinar Kafka Maecenas Maecenas posuere purus pulvinar amet, createdAt=2023-04-13T12:55:34))
2023-05-01 15:45:46 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7825659200736447749, userId=8449163455438249226, text=ultricies malesuada sit libero malesuada porttitor consectetuer ultricies Kafka elit libero magna amet ultricies Fusce, createdAt=2023-04-30T15:26:07))
2023-05-01 15:45:47 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7274491977001518795, userId=8401815194777763224, text=Fusce adipiscing Lorem Lorem purus amet dolor ipsum Kafka sit libero massa congue Fusce libero, createdAt=2023-04-27T14:24:09))
2023-05-01 15:45:47 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3396699743997168858, userId=8314707935500979954, text=porttitor massa ipsum posuere adipiscing dolor magna Fusce Kafka amet Fusce porttitor porttitor massa Lorem, createdAt=2023-04-27T14:27:49))
2023-05-01 15:45:48 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3866105339478045699, userId=7885496758302485341, text=Maecenas purus Maecenas amet sit dolor porttitor malesuada Kafka posuere porttitor purus lectus Fusce malesuada, createdAt=2023-04-10T14:56:17))
2023-05-01 15:45:48 [parallel-12] INFO  reactor.Flux.Map.2 - request(24)
2023-05-01 15:45:48 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1661115301667719120, userId=456111654488525552, text=posuere pulvinar pulvinar congue amet magna dolor magna Kafka amet libero magna dolor Lorem congue, createdAt=2023-04-10T15:16:58))
2023-05-01 15:45:49 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8330512873273634375, userId=4547770878561592396, text=Maecenas amet purus amet amet massa purus purus Kafka purus congue magna congue porttitor amet, createdAt=2023-04-10T15:23:39))
2023-05-01 15:45:49 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2789005309511133591, userId=2494471216972225114, text=sit massa dolor libero lectus libero sed sit Kafka porttitor Lorem elit congue ipsum ultricies, createdAt=2023-04-10T15:27:29))
2023-05-01 15:45:50 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7597666196101068390, userId=9053398172897381258, text=elit massa posuere consectetuer purus malesuada amet Maecenas Kafka sit massa porttitor elit congue ipsum, createdAt=2023-04-09T16:10:51))
2023-05-01 15:45:50 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2838405879428608974, userId=1439367231804493567, text=sit purus ultricies Fusce ultricies massa sed pulvinar Kafka libero Maecenas magna ultricies pulvinar pulvinar, createdAt=2023-04-09T16:11:21))
2023-05-01 15:45:51 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8460011511913932022, userId=8763370667186825045, text=purus Fusce adipiscing consectetuer sed elit massa Lorem Kafka posuere posuere Lorem Maecenas Fusce posuere, createdAt=2023-04-09T16:12:11))
2023-05-01 15:45:51 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6285299912660047303, userId=4478907111092890584, text=libero lectus consectetuer purus lectus elit posuere congue Kafka sed malesuada massa Lorem ultricies sit, createdAt=2023-04-09T16:15:21))
2023-05-01 15:45:52 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8102959334687296922, userId=8948951036944576697, text=Fusce elit consectetuer magna Fusce ultricies magna magna Kafka Fusce magna posuere Lorem libero consectetuer, createdAt=2023-04-09T16:16:51))
2023-05-01 15:45:52 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8596080180252295631, userId=227118727957181952, text=pulvinar Lorem pulvinar lectus adipiscing ipsum massa sed Kafka ipsum massa magna massa amet massa, createdAt=2023-04-27T14:18:29))
2023-05-01 15:45:53 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=663090716038200920, userId=8164225241110179915, text=pulvinar posuere magna sit libero malesuada lectus porttitor Kafka malesuada Maecenas massa Lorem purus massa adipiscing, createdAt=2023-04-10T14:58:57))
2023-05-01 15:45:53 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4546700274894690135, userId=5734980820826705818, text=sed dolor malesuada purus lectus consectetuer consectetuer Lorem Kafka congue magna Fusce Lorem pulvinar ultricies lectus, createdAt=2023-04-09T16:13:21))
2023-05-01 15:45:54 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8241882797809953589, userId=838438715685719106, text=malesuada dolor libero ultricies elit amet ultricies amet Kafka magna pulvinar pulvinar lectus porttitor sed sed, createdAt=2023-04-13T12:48:54))
2023-05-01 15:45:54 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6270372036791112062, userId=8457914725332730713, text=amet magna sit adipiscing magna sed lectus lectus Kafka massa ipsum consectetuer lectus amet adipiscing dolor, createdAt=2023-04-13T12:54:24))
2023-05-01 15:45:55 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7240229426240994949, userId=1253810110326587545, text=magna magna porttitor Fusce dolor elit congue sed Kafka magna adipiscing Lorem lectus elit pulvinar porttitor, createdAt=2023-04-13T13:01:23))
2023-05-01 15:45:55 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=528394991974136764, userId=2347781919242000480, text=dolor porttitor malesuada libero Lorem sed massa Maecenas Kafka massa Fusce magna posuere sit massa malesuada, createdAt=2023-04-30T15:26:17))
2023-05-01 15:45:56 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1075017692933139667, userId=5514789214272749304, text=sed sed libero libero elit posuere purus Fusce Kafka amet magna magna porttitor Maecenas lectus lectus, createdAt=2023-04-27T14:24:39))
2023-05-01 15:45:56 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=153891513581919208, userId=1979402758503464869, text=ultricies porttitor dolor amet sit massa Lorem magna Kafka Lorem posuere dolor elit ipsum libero dolor, createdAt=2023-04-10T14:53:37))
2023-05-01 15:45:57 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7294775943551869762, userId=8997013996954939488, text=Fusce Lorem posuere Fusce lectus Fusce magna posuere Kafka magna libero libero Fusce posuere purus libero, createdAt=2023-04-10T14:57:47))
2023-05-01 15:45:57 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1288754212090653895, userId=7480525469950241668, text=porttitor congue sed ipsum dolor consectetuer malesuada adipiscing Kafka adipiscing consectetuer pulvinar massa elit Maecenas ipsum, createdAt=2023-04-10T15:04:27))
2023-05-01 15:45:58 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4694596949840326013, userId=393280892751988412, text=pulvinar consectetuer congue porttitor adipiscing amet magna dolor Kafka ipsum magna dolor elit dolor porttitor libero, createdAt=2023-04-10T15:05:28))
2023-05-01 15:45:58 [parallel-9] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5672511854121139538, userId=906478510746768993, text=Maecenas posuere consectetuer massa libero Lorem elit lectus Kafka malesuada consectetuer congue porttitor sed sed elit, createdAt=2023-04-10T15:05:38))
2023-05-01 15:45:59 [parallel-10] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=252324059046863106, userId=6993963947200760103, text=Lorem massa posuere magna elit sed porttitor Lorem Kafka consectetuer libero Maecenas purus porttitor Maecenas porttitor, createdAt=2023-04-10T15:06:58))
2023-05-01 15:45:59 [parallel-11] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7802865651576781830, userId=4033547816537933413, text=posuere pulvinar dolor magna amet sed magna magna Kafka malesuada consectetuer magna libero consectetuer ipsum sed, createdAt=2023-04-10T15:07:58))
2023-05-01 15:46:00 [parallel-12] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6387902779867935608, userId=135828440834043238, text=Maecenas Fusce posuere Lorem libero Lorem ultricies amet Kafka purus porttitor lectus Maecenas pulvinar consectetuer consectetuer, createdAt=2023-04-10T15:15:58))
2023-05-01 15:46:00 [parallel-12] INFO  reactor.Flux.Map.2 - request(24)
2023-05-01 15:46:00 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3757413913453270029, userId=8091038552202741949, text=porttitor Fusce malesuada Fusce dolor sed ultricies sed Kafka ultricies massa malesuada malesuada posuere posuere massa, createdAt=2023-04-10T15:25:49))
2023-05-01 15:46:01 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3300953783551617804, userId=2365290036527953268, text=malesuada Lorem Fusce Maecenas congue sed sed porttitor Kafka elit dolor dolor ipsum Lorem congue ultricies, createdAt=2023-04-10T15:32:09))
2023-05-01 15:46:01 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5424021136309804832, userId=8879289603482342170, text=elit elit Lorem ultricies sit sed ipsum purus Kafka Lorem elit elit Maecenas magna purus purus, createdAt=2023-04-09T16:15:51))
2023-05-01 15:46:02 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3160642437545580541, userId=6137186943677474318, text=ultricies ipsum ultricies Maecenas sed malesuada congue porttitor Kafka purus adipiscing ultricies malesuada Maecenas congue lectus, createdAt=2023-04-13T14:58:58))
2023-05-01 15:46:02 [parallel-4] INFO  reactor.Flux.Map.2 - onComplete()
